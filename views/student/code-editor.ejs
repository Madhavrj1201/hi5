<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code Editor - Campus Bridge</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs/editor/editor.main.css">
</head>
<body>
    <%- include('../partials/navbar') %>

    <main class="container-fluid">
        <div class="code-editor-layout">
            <!-- Problem Description -->
            <div class="problem-panel">
                <div class="problem-header">
                    <h2><%= problem.title %></h2>
                    <span class="difficulty <%= problem.difficulty %>"><%= problem.difficulty %></span>
                </div>
                <div class="problem-description">
                    <%= problem.description %>
                </div>
                <div class="test-cases">
                    <h3>Example Test Cases</h3>
                    <% problem.testCases.filter(tc => !tc.isHidden).forEach((testCase, index) => { %>
                        <div class="test-case">
                            <div class="test-input">
                                <strong>Input:</strong>
                                <pre><%= testCase.input %></pre>
                            </div>
                            <div class="test-output">
                                <strong>Expected Output:</strong>
                                <pre><%= testCase.expectedOutput %></pre>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>

            <!-- Code Editor -->
            <div class="editor-panel">
                <div class="editor-controls">
                    <select id="language-select" class="language-dropdown">
                        <option value="javascript">JavaScript</option>
                        <option value="python">Python</option>
                        <option value="java">Java</option>
                        <option value="cpp">C++</option>
                    </select>
                    <button class="btn btn-primary" onclick="runCode()">Run Code</button>
                    <button class="btn btn-secondary" onclick="submitCode()">Submit</button>
                </div>
                <div id="monaco-editor"></div>
            </div>

            <!-- Output Panel -->
            <div class="output-panel">
                <div class="output-header">
                    <h3>Output</h3>
                    <button class="btn btn-secondary" onclick="clearOutput()">Clear</button>
                </div>
                <div id="output-content"></div>
            </div>
        </div>
    </main>

    <!-- AI Assistant Modal -->
    <div id="aiAssistantModal" class="modal">
        <div class="modal-content">
            <h3>AI Assistant</h3>
            <div id="ai-suggestions"></div>
            <button class="btn btn-secondary" onclick="closeAiModal()">Close</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs/loader.js"></script>
    <script>
        let editor;
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs' }});
        require(['vs/editor/editor.main'], function() {
            editor = monaco.editor.create(document.getElementById('monaco-editor'), {
                value: '// Write your code here\n',
                language: 'javascript',
                theme: 'vs-dark',
                automaticLayout: true,
                minimap: { enabled: false }
            });

            // Language change handler
            document.getElementById('language-select').addEventListener('change', (e) => {
                monaco.editor.setModelLanguage(editor.getModel(), e.target.value);
            });
        });

        async function runCode() {
            const code = editor.getValue();
            const language = document.getElementById('language-select').value;
            const outputDiv = document.getElementById('output-content');

            try {
                const response = await fetch('/student/code/run', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        code,
                        language,
                        problemId: '<%= problem._id %>'
                    })
                });

                const result = await response.json();
                outputDiv.innerHTML = `
                    <div class="test-results">
                        ${result.testCases.map(test => `
                            <div class="test-case ${test.passed ? 'passed' : 'failed'}">
                                <div>Input: ${test.input}</div>
                                <div>Expected: ${test.expectedOutput}</div>
                                <div>Your Output: ${test.actualOutput}</div>
                                <div>Status: ${test.passed ? 'Passed' : 'Failed'}</div>
                            </div>
                        `).join('')}
                    </div>
                `;
            } catch (error) {
                outputDiv.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        }

        async function submitCode() {
            const code = editor.getValue();
            const language = document.getElementById('language-select').value;

            try {
                const response = await fetch('/student/code/submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        code,
                        language,
                        problemId: '<%= problem._id %>'
                    })
                });

                const result = await response.json();
                if (result.success) {
                    alert('Solution submitted successfully!');
                    window.location.href = '/student/problems';
                } else {
                    alert('Submission failed: ' + result.message);
                }
            } catch (error) {
                alert('Error submitting code: ' + error.message);
            }
        }

        async function getAIHints() {
            const code = editor.getValue();
            const language = document.getElementById('language-select').value;

            try {
                const response = await fetch('/ai/hints', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        code,
                        language,
                        context: '<%= problem.title %>'
                    })
                });

                const result = await response.json();
                document.getElementById('ai-suggestions').innerHTML = result.hints;
                document.getElementById('aiAssistantModal').style.display = 'block';
            } catch (error) {
                alert('Error getting AI hints: ' + error.message);
            }
        }

        function clearOutput() {
            document.getElementById('output-content').innerHTML = '';
        }

        function closeAiModal() {
            document.getElementById('aiAssistantModal').style.display = 'none';
        }
    </script>

    <style>
        .code-editor-layout {
            display: grid;
            grid-template-columns: 400px 1fr 300px;
            gap: 1rem;
            height: calc(100vh - 120px);
            padding: 1rem;
        }

        .problem-panel {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            overflow-y: auto;
        }

        .editor-panel {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        #monaco-editor {
            flex: 1;
            border-radius: 8px;
            overflow: hidden;
        }

        .output-panel {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            overflow-y: auto;
        }

        .test-case {
            margin: 1rem 0;
            padding: 1rem;
            background: #f5f5f5;
            border-radius: 4px;
        }

        .test-case.passed {
            border-left: 4px solid #4caf50;
        }

        .test-case.failed {
            border-left: 4px solid #f44336;
        }

        .difficulty {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.875rem;
        }

        .difficulty.easy { background: #4caf50; color: white; }
        .difficulty.medium { background: #ff9800; color: white; }
        .difficulty.hard { background: #f44336; color: white; }
    </style>
</body>
</html>